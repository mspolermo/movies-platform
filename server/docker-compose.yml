services:
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: >
      sh -c "sleep 15 && npm run start:dev api-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '${API_GATEWAY_PORT:-5000}:${API_GATEWAY_PORT:-5000}'
    env_file:
      - .env
    environment:
      - PORT=${API_GATEWAY_PORT:-5000}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - USERS_QUEUE=${USERS_QUEUE}
      - FILMS_QUEUE=${FILMS_QUEUE}
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT:-5000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  auth-users:
    build:
      context: .
      dockerfile: ./apps/auth-users/Dockerfile
      target: development
    command: >
      sh -c "sleep 15 && npm run start:dev auth-users"
    depends_on:
      db2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '${AUTH_USERS_PORT:-3001}:${AUTH_USERS_PORT:-3001}'
    env_file:
      - .env
    environment:
      - PORT=${AUTH_USERS_PORT:-3001}
      - POSTGRES_HOST=db2
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - RABBITMQ_URL=${RABBITMQ_URL}
      - USERS_QUEUE=${USERS_QUEUE}
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AUTH_USERS_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  kino-db:
    build:
      context: .
      dockerfile: ./apps/kino-db/Dockerfile
      target: development
    command: >
      sh -c "sleep 15 && npm run start:dev kino-db"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '${KINO_DB_PORT:-3002}:${KINO_DB_PORT:-3002}'
    env_file:
      - .env
    environment:
      - PORT=${KINO_DB_PORT:-3002}
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB_KINO}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - RABBITMQ_URL=${RABBITMQ_URL}
      - FILMS_QUEUE=${FILMS_QUEUE}
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${KINO_DB_PORT:-3002}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-root@root.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-root}
    depends_on:
      db:
        condition: service_healthy
      db2:
        condition: service_healthy
    networks:
      - default
    restart: unless-stopped
  rabbitmq:
    image: rabbitmq:3.10.7-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3   
  db:
    container_name: db
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_DB=${POSTGRES_DB_KINO:-kino}
    ports:
      - 5432:5432 
    volumes:   
      - ./devops/kino-db/final-kino-initial-data-dump.sql:/docker-entrypoint-initdb.d/final-kino-initial-data-dump.sql
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB_KINO:-kino}"]
      interval: 30s
      timeout: 10s
      retries: 3  
  db2:
    container_name: db2
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_DB=${POSTGRES_DB_USER:-user}
    ports:
      - 5433:5432
    volumes:   
      - ./devops/users-db/users-init-dump.sql:/docker-entrypoint-initdb.d/users-init-dump.sql
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB_USER:-user}"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    driver: bridge  
