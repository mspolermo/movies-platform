import { Controller, Get } from '@nestjs/common';
import { AuthService } from './auth/auth.service';
import { FilmsService } from './films/films.service';
import { Public } from './shared/guards';

@Controller()
export class AppController {
  constructor(
    private readonly authService: AuthService,
    private readonly filmsService: FilmsService,
  ) {}

  @Public()
  @Get('/health')
  async health() {
    console.log('üè• Health check –∑–∞–ø—Ä–æ—Å');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    const rabbitmqStatus = {
      users: await this.checkRabbitMQConnection('users'),
      films: await this.checkRabbitMQConnection('films'),
    };

    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
      service: 'api-gateway',
      rabbitmq: rabbitmqStatus,
    };
  }

  private async checkRabbitMQConnection(service: string): Promise<string> {
    try {
      if (service === 'users') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å auth-users —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        const isConnected = this.authService.isConnected();
        return isConnected ? 'connected' : 'disconnected';
      } else if (service === 'films') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å kino-db —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        const isConnected = this.filmsService.isConnected();
        return isConnected ? 'connected' : 'disconnected';
      }
      return 'unknown';
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${service}:`, error);
      return 'disconnected';
    }
  }
}
