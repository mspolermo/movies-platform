import {
  Injectable,
  OnModuleInit,
  ConflictException,
  UnauthorizedException,
} from '@nestjs/common';
import {
  ClientProxy,
  ClientProxyFactory,
  Transport,
} from '@nestjs/microservices';
import { firstValueFrom } from 'rxjs';
import { ConfigService } from '@nestjs/config';
import { JwtService } from '@nestjs/jwt';
import { AuthDto, CreateUserDto, OauthCreateUserDTO } from './dto';
import { AuthResponse, RegistrationResponse } from './interfaces';
import { User } from '../shared/interfaces';

@Injectable()
export class AuthService implements OnModuleInit {
  private clientUsers: ClientProxy;

  constructor(
    private configService: ConfigService,
    private jwtService: JwtService,
  ) {
    const rabbitmqUrl = this.configService.get<string>('RABBITMQ_URL');
    const usersQueue = this.configService.get<string>('USERS_QUEUE');

    this.clientUsers = ClientProxyFactory.create({
      transport: Transport.RMQ,
      options: {
        urls: [rabbitmqUrl],
        queue: usersQueue,
        queueOptions: {
          durable: false,
        },
      },
    });
  }

  async onModuleInit(): Promise<void> {
    await this.connectWithRetry();
  }

  private async connectWithRetry(maxAttempts = 5): Promise<void> {
    for (let i = 0; i < maxAttempts; i++) {
      try {
        console.log(
          `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ (${i + 1}/${maxAttempts})`,
        );
        await this.clientUsers.connect();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ');
        return;
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`,
          error,
        );
        if (i === maxAttempts - 1) {
          console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
          throw error;
        }
        const delay = 1000 * (i + 1);
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
  }

  async registrationUser(dto: CreateUserDto): Promise<RegistrationResponse> {
    try {
      const { user, token } = await firstValueFrom(
        this.clientUsers.send('registration', dto),
      );
      return { User: user, role: user.roles, token: token };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);

      // –ú–∞–ø–ø–∏–Ω–≥ –æ—à–∏–±–æ–∫ –æ—Ç auth-users —Å–µ—Ä–≤–∏—Å–∞
      if (
        error?.message?.includes('—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω') ||
        error?.message?.includes('already registered') ||
        (error?.status === 'error' &&
          error?.message?.includes('Internal server error'))
      ) {
        throw new ConflictException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        );
      }

      if (
        error?.message?.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π') ||
        error?.message?.includes('invalid')
      ) {
        throw new UnauthorizedException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (error && typeof error === 'object' && 'message' in error) {
        throw new Error(error.message as string);
      }

      throw error;
    }
  }

  async outRegistrationUser(
    dto: OauthCreateUserDTO,
  ): Promise<RegistrationResponse> {
    try {
      const { user, token } = await firstValueFrom(
        this.clientUsers.send('outRegistration', dto),
      );
      return { User: user, role: user.roles, token: token };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ OAuth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);

      // –ú–∞–ø–ø–∏–Ω–≥ –æ—à–∏–±–æ–∫ –æ—Ç auth-users —Å–µ—Ä–≤–∏—Å–∞
      if (
        error?.message?.includes('—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω') ||
        error?.message?.includes('already registered')
      ) {
        throw new ConflictException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        );
      }

      throw error;
    }
  }

  async loginUser(dto: AuthDto): Promise<AuthResponse> {
    try {
      const { user, token } = await firstValueFrom(
        this.clientUsers.send('login', dto),
      );
      return {
        email: user.email,
        userId: user.id,
        role: user.roles,
        token: token,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);

      // –ú–∞–ø–ø–∏–Ω–≥ –æ—à–∏–±–æ–∫ –æ—Ç auth-users —Å–µ—Ä–≤–∏—Å–∞
      if (
        error?.message?.includes('–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å') ||
        error?.message?.includes('wrong password')
      ) {
        throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }

      if (
        error?.message?.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω') ||
        error?.message?.includes('user not found')
      ) {
        throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      throw error;
    }
  }

  async checkToken(user: User): Promise<User> {
    return user;
  }

  async refreshToken(user: User): Promise<{ token: string }> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const payload = {
        sub: user.id, // ‚úÖ –¢–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        email: user.email, // ‚úÖ Email –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      };

      const token = await this.jwtService.signAsync(payload);
      return { token };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  async checkConnection(): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ —á–µ—Ä–µ–∑ ping
      await this.clientUsers.emit('ping', { timestamp: Date.now() });
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è auth-users:', error);
      return false;
    }
  }

  isConnected(): boolean {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ RabbitMQ
      return this.clientUsers !== undefined;
    } catch (error) {
      return false;
    }
  }
}
