import {
  CanActivate,
  ExecutionContext,
  HttpException,
  HttpStatus,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ROLES_KEY } from './roles-auth.decorator';
import { ACCESS_ERROR } from '../constants/errors.constants';
import { AuthenticatedRequest } from '../interfaces';
import { UserRolesService } from '../services/user-roles.service';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(
    private reflector: Reflector,
    private userRolesService: UserRolesService,
  ) {}

  /**
   * –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –º–æ–∂–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
   * @param context - –æ–±—ä–µ–∫—Ç ExecutionContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ.
   * @returns Promise<boolean>
   */
  async canActivate(context: ExecutionContext): Promise<boolean> {
    try {
      const requiredRoles = this.reflector.getAllAndOverride<string[]>(
        ROLES_KEY,
        [context.getHandler(), context.getClass()],
      );

      if (!requiredRoles) {
        return true;
      }

      const req = context.switchToHttp().getRequest<AuthenticatedRequest>();
      
      if (!req.user) {
        console.log('üîí RolesGuard: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        throw new UnauthorizedException({
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ä–æ–ª—è–º–∏ –∏–∑ –ë–î
      const userWithRoles = await this.userRolesService.getUserWithRoles(
        req.user.id,
      );

      if (!userWithRoles.roles || !Array.isArray(userWithRoles.roles)) {
        console.log('üîí RolesGuard: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π');
        throw new HttpException(ACCESS_ERROR, HttpStatus.FORBIDDEN);
      }

      const hasRequiredRole = userWithRoles.roles.some((role) =>
        requiredRoles.includes(role.value),
      );

      if (!hasRequiredRole) {
        console.log(
          `üîí RolesGuard: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userWithRoles.email} (ID: ${userWithRoles.id}) –Ω–µ –∏–º–µ–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ä–æ–ª–µ–π: ${requiredRoles.join(', ')}`,
        );
        throw new HttpException(ACCESS_ERROR, HttpStatus.FORBIDDEN);
      }

      console.log(
        `üîí RolesGuard: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userWithRoles.email} —Å —Ä–æ–ª—è–º–∏: ${userWithRoles.roles.map((r) => r.value).join(', ')}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      req.user = userWithRoles;

      return true;
    } catch (e) {
      if (e instanceof UnauthorizedException || e instanceof HttpException) {
        throw e;
      }
      
      console.log('üîí RolesGuard: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–µ–π:', e.message);
      throw new HttpException(ACCESS_ERROR, HttpStatus.FORBIDDEN);
    }
  }
}
